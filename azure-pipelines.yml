variables:
  source_folder: heroesdata/
  latest_release_files: /latest_release
  partial_files: /partial_files
  partial_files_path_exists: ''

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DownloadGitHubRelease@0
  displayName: Download Latest Release
  inputs:
    connection: 'koliva8245-OAuth'
    userRepository: 'HeroesToolChest/heroes-data'
    defaultVersionType: 'latest'
    itemPattern: 'heroes-data-*_all.zip'
    downloadPath: '$(System.ArtifactsDirectory)'

- task: ExtractFiles@1
  displayName: Extract Latest Release
  inputs:
    archiveFilePatterns: '$(System.ArtifactsDirectory)/heroes-data-*_all.zip'
    destinationFolder: '$(latest_release_files)'
    cleanDestinationFolder: true

- pwsh: |
    $versions = Get-ChildItem -Path $env:SOURCE_FOLDER -Directory -Name
    $last_version = $versions[-1]
    $last_version
    echo "##vso[task.setvariable variable=version]$last_version"
  displayName: Get Lastest Version

- pwsh: |
    Write-Host "Old path directories:"
    Get-ChildItem -Path $env:LATEST_RELEASE_FILES -Directory -Name
    Write-Host "New path directories:"
    Get-ChildItem -Path $env:SOURCE_FOLDER -Directory -Name

    if (Write-Host (Get-ChildItem $env:LATEST_RELEASE_FILES | Measure-Object).Count -eq 0)
    {
       Write-Host "##vso[task.LogIssue type=error;]No files in old path"
       exit 1
    }

    ./ps1/get-diff-files.ps1 -OldPath $env:LATEST_RELEASE_FILES -NewPath $env:SOURCE_FOLDER -PartialPath $env:PARTIAL_FILES

    $env:PARTIAL_FILES_PATH_EXISTS = Test-Path $env:PARTIAL_FILES -PathType Container
  displayName: Get New Files

- task: ArchiveFiles@2
  displayName: Archive Files - All
  inputs:
    rootFolderOrFile: '$(source_folder)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/heroes-data-$(version)_all.zip'
    replaceExistingArchive: true

- task: ArchiveFiles@2
  displayName: Archive Files - Last
  inputs:
    rootFolderOrFile: '$(source_folder)/$(version)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/heroes-data-$(version)_last.zip'
    replaceExistingArchive: true

- task: ArchiveFiles@2
  displayName: Archive Files - New
  inputs:
    rootFolderOrFile: '$(partial_files)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/heroes-data-$(version)_new.zip'
    replaceExistingArchive: true
  condition: and(succeeded(), eq('variables.partial_files_path_exists', 'True'))

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact - All
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/heroes-data-$(version)_all.zip'
    ArtifactName: 'heroes-data-$(version)_all'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact - Last
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/heroes-data-$(version)_last.zip'
    ArtifactName: 'heroes-data-$(version)_last'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact - New
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/heroes-data-$(version)_new.zip'
    ArtifactName: 'heroes-data-$(version)_new'
    publishLocation: 'Container'
  condition: and(succeeded(), eq('variables.partial_files_path_exists', 'True'))